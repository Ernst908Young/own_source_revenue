<?phpclass ServiceParametersController extends Controller {    /**     * @var string the default layout for the views. Defaults to '//layouts/column2', meaning     * using two-column layout. See 'protected/views/layouts/column2.php'.     */    public $layout = '//layouts/column2';    /**     * @return array action filters     */    public function filters() {        return array(            'accessControl', // perform access control for CRUD operations            'postOnly + delete', // we only allow deletion via POST request        );    }    /**     * Specifies the access control rules.     * This method is used by the 'accessControl' filter.     * @return array access control rules     */  public function accessRules()    {        return array(                          array('allow', //allow authenticated user to perform 'create' and 'update' actions                'actions'=>array('view','create','update','delete','ndex','view','admin','performAjaxValidation','addParams','convertJson','convertDocTypetoJson','getDepartmentServiceList','uploadDocs','uploadInspectionDocs'),                'expression'=>'DefaultUtility::isInfoWizardAdmin()',            ),                        array('deny',  // deny all users                'users'=>array('*'),            ),        );    }    /**     * Displays a particular model.     * @param integer $id the ID of the model to be displayed     */    public function actionView($id) {        $this->render('view', array(            'model' => $this->loadModel($id),        ));    }    /**     * Creates a new model.     * If creation is successful, the browser will be redirected to the 'view' page.     */    public function actionCreate() {        $model = new BoInformationWizardServiceParameters;        // Uncomment the following line if AJAX validation is needed        // $this->performAjaxValidation($model);        $servivcesname = BoInformationWizardServiceParameters::getAllServices();        foreach ($servivcesname as $key => $val) {            $secid = $val['id'];            $secname = $val['service_name'];            $sn[$secid] = $secname;        }        //print_r($services);die;        if (isset($_POST['BoInformationWizardServiceParameters'])) {            $model->attributes = $_POST['BoInformationWizardServiceParameters'];            if ($model->save())                $this->redirect(array('view', 'id' => $model->id));        }        $this->render('create', array(            'model' => $model,            'sn' => $sn        ));    }    /**     * Updates a particular model.     * If update is successful, the browser will be redirected to the 'view' page.     * @param integer $id the ID of the model to be updated     */    public function actionUpdate($id) {        $model = $this->loadModel($id);        // Uncomment the following line if AJAX validation is needed        // $this->performAjaxValidation($model);        if (isset($_POST['BoInformationWizardServiceParameters'])) {            $model->attributes = $_POST['BoInformationWizardServiceParameters'];            if ($model->save())                $this->redirect(array('view', 'id' => $model->id));        }        $this->render('update', array(            'model' => $model,        ));    }    /**     * Deletes a particular model.     * If deletion is successful, the browser will be redirected to the 'admin' page.     * @param integer $id the ID of the model to be deleted     */    public function actionDelete($id) {        $this->loadModel($id)->delete();        // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser        if (!isset($_GET['ajax']))            $this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));    }    /**     * Lists all models.     */    public function actionIndex() {        $dataProvider = new CActiveDataProvider('BoInformationWizardServiceParameters');        $this->render('index', array(            'dataProvider' => $dataProvider,        ));    }    /**     * Manages all models.     */    public function actionAdmin() {        $model = new BoInformationWizardServiceParameters('search');        $model->unsetAttributes();  // clear any default values        if (isset($_GET['BoInformationWizardServiceParameters']))            $model->attributes = $_GET['BoInformationWizardServiceParameters'];        $this->render('admin', array(            'model' => $model,        ));    }    /**     * Returns the data model based on the primary key given in the GET variable.     * If the data model is not found, an HTTP exception will be raised.     * @param integer $id the ID of the model to be loaded     * @return BoInformationWizardServiceParameters the loaded model     * @throws CHttpException     */    public function loadModel($id) {        $model = BoInformationWizardServiceParameters::model()->findByPk($id);        if ($model === null)            throw new CHttpException(404, 'The requested page does not exist.');        return $model;    }    /**     * Performs the AJAX validation.     * @param BoInformationWizardServiceParameters $model the model to be validated     */    protected function performAjaxValidation($model) {        if (isset($_POST['ajax']) && $_POST['ajax'] === 'bo-information-wizard-service-parameters-form') {            echo CActiveForm::validate($model);            Yii::app()->end();        }    }    /**     * Discription: Adds service parameter for a particular service     * params: Service ID       * Author: Rahul Kumar     */    function actionAddparams() {        unset($_SESSION['ServiceParameter']);        $serviceID = $_GET['serviceID'];        $serviceData = BoInformationWizardServiceMaster::model()->findByPk($serviceID);        $connection = Yii::app()->db;        if (!empty($_POST)) {			/* echo "<pre>";			print_r($_POST);die(); */   $modified=date('Y-m-d H:i:s');   // BoInformationWizardServiceParameters::model()->deleteAll("service_id='$serviceID'");            $sql="UPDATE bo_information_wizard_service_parameters SET is_active='N',modified='$modified' WHERE service_id='$serviceID' AND is_active='Y'";   $connection=Yii::app()->db; 		$command=$connection->createCommand($sql);		$command->execute();  $serviceType = $_POST['service_type'];            $alldata = $_POST;            $acilppr['acilppr'] = $_POST['acilppr'];            $acilppr['acilppr']['service_type'] = $alldata['service_type'][0];$data[]=$acilppr['acilppr'];            if (in_array('Amendment - Others', $serviceType)) {                $ao['ao'] = $_POST['ao'];                $ao['ao']['service_type'] = "Amendment - Others";                 $data[] = $ao['ao'];            }            if (in_array('Amendment - Cancellation', $serviceType)) {                $ac['ac'] = $_POST['ac'];                $ac['ac']['service_type'] = "Amendment - Cancellation";  $data[] = $ac['ac'];            }            if (in_array('Amendment - Surrender', $serviceType)) {                $as['as'] = $_POST['as'];                $as['as']['service_type'] = "Amendment - Surrender"; $data[] = $as['as'];            }            if (in_array('Amendment - Transfer', $serviceType)) {                $at['at'] = $_POST['at'];                $at['at']['service_type'] = "Amendment - Transfer";  $data[] = $at['at'];            }            if (in_array('Duplicate Copy', $serviceType)) {                $duplicate['duplicate'] = $_POST['duplicate'];                $duplicate['duplicate']['service_type'] = "Duplicate"; $data[] = $duplicate['duplicate'];            }            if (in_array('Renewal', $serviceType)) {                $renewal['renewal'] = $_POST['renewal'];                $renewal['renewal']['service_type'] = "Renewal";$data[] = $renewal['renewal'];            }            if (in_array('Return', $serviceType)) {                $return['return'] = $_POST['return'];                $return['return']['service_type'] = "Return";  $data[] = $return['return'];            }            if (in_array('Maintenance of Register', $serviceType)) {                $maintainence['maintainence'] = $_POST['maintainence'];                $maintainence['maintainence']['service_type'] = "Maintenance of Register";   $data[] = $maintainence['maintainence'];            }						if (in_array('Utilities', $serviceType)) {                $utilities['utilities'] = $_POST['utilities'];                $utilities['utilities']['service_type'] = "Utilities";				$data[] = $utilities['utilities'];            }            // echo "<pre>";print_r($data);die;            $status = "";            foreach ($data as $datas) {                $model = new BoInformationWizardServiceParameters;                $model->service_id = $serviceID;                $model->service_type = $datas['service_type'];                $allList=InfowizardQuestionMasterExt::getMasterList('bo_information_wizard_additional_sub_service_master','sub_service_name','id');                 if($datas['service_type']=="Duplicate"){                  $datas['service_type']="Duplicate Copy";                  }                $Sid=$datas['service_type'];                if(!empty($allList[$Sid])){                 $model->servicetype_additionalsubservice = $allList[$Sid];                 }else{                      $model->servicetype_additionalsubservice = "0";                 }                                 $InspectionData['BoInformationWizardServiceMaster'] = $datas;                $model->ipaddress=$_SERVER['REMOTE_ADDR'];		$model->user_agent=$_SERVER['HTTP_USER_AGENT'];                $model->created=date('Y-m-d H:i:s');                            $model->attributes = $InspectionData['BoInformationWizardServiceMaster'];                 // print_r($model);                if ($model->save()) {                    $status = $status . ", " . $datas['service_type'];                }else{                    die(var_dump($model->getErrors()));                }                            }            if ($status != "") {                Yii::app()->user->setFlash('Success', "Service Parameters for $status has been saved");            } else {                Yii::app()->user->setFlash('Error', "Service Parameters saving failed");            }            $serviceFeeURL = "/infowizard/serviceParameters/Addparams/serviceID/$serviceID";            $this->redirect(Yii::app()->createUrl($serviceFeeURL));        }        $applications = InfowizardQuestionMasterExt::getIWListDocChk();        $sql = "SELECT * from bo_information_wizard_service_parameters where service_id=$serviceID AND is_active='Y'";        $command = $connection->createCommand($sql);        $ServiceParameter = $command->queryAll();        if (!empty($ServiceParameter)) {            foreach ($ServiceParameter as $key => $params) {                $service_type = $params['service_type'];                if ($key == 0) {                    $_SESSION['ServiceParameter']["service"] = $params;                                    } else if($params['service_type']=="Duplicate"){                      $_SESSION['ServiceParameter']["Duplicate Copy"] = $params;                 }else {                    $_SESSION['ServiceParameter'][$service_type] = $params;                }            }        } else {            $_SESSION['ServiceParameter'] = "";        }        //  print_r($_SESSION['ServiceParameter']);die;        $this->render("addparams", array("applications" => $applications, "serviceData" => $serviceData));    }/**     * Discription: This function converts data from php array to json         * Author: Rahul Kumar     */        public function actionConvertJson(){         if(!empty($_POST)){          $documentData=array();         $i=0;   foreach ($_POST['document_checklist_creation'] as $key=>$documentDat){            if($key!=""){                  $documentData[$i]['doc_id']=$_POST['document_checklist_creation'][$key];                  $documentData[$i]['is_required']=$_POST['is_required'][$key];                  $documentData[$i]['doc_comment']=$_POST['doc_comment'][$key];                                    if(!empty($_POST['constitution'][$key])){                            if(isset($documentData[$i]['constitution']) && ($documentData[$i]['constitution'] !="")){                            $documentData[$i]['constitution'].= ','.$_POST['constitution'][$key];                                                         }else{                             $documentData[$i]['constitution'] = $_POST['constitution'][$key];                                 }                                                                        }                  $i= $i+1;             }         }         echo json_encode($documentData);die;             }               }/**     * Discription: This function converts data from php array to json         * Author: Rahul Kumar     * Date : 11-01-2018      */        public function actionConvertDocTypetoJson(){         if(!empty($_POST)){          $documentData=array();         $i=0;   foreach ($_POST['document_type_creation'] as $key=>$documentDat){            if($key!=""){                  $documentData[$i]['doc_id']=$_POST['document_type_creation'][$key];                  $documentData[$i]['is_required']=$_POST['is_required'][$key];                  $documentData[$i]['doc_comment']=$_POST['doc_comment'][$key];                 $i= $i+1;             }         }         echo json_encode($documentData);die;             }               }     /**     * Discription: This function returns all list of services of a particular department     * Author: Rahul Kumar     */     public function actionGetDepartmentServiceList(){         $departments="";          $departmentName=$_GET['department'];          $allDepartmentServiceList = InfowizardQuestionMasterExt::getMasterList('bo_sp_all_applications', 'app_id', 'app_name', 'department_name',$departmentName);          foreach ($allDepartmentServiceList as $k => $v) {         $departments = "$departments<option value='$k'>$v</options>";    }    echo "$departments";die;    }     /**     * Discription: This function use to upload all type of documents for a particular service     * Author: Rahul Kumar     */         public function actionUploadDocs() {       extract($_GET);        if (!empty($_POST)) {                if ($_FILES['file']['type'] == 'application/pdf' && $_FILES['file']['name'] != '' &&                    $_FILES['file']['size'] <= (1024 * 1024 * 5)) {                $path = Yii::app()->basePath . "/../../themes/backend/$location/";                $nname = $docName . "-" . "$serivceID" . "-" . "$subServiceID" . ".pdf";                move_uploaded_file($_FILES['file']['tmp_name'], $path . $nname);                $pathUploaded = "/themes/backend/" . $location . "/" . $nname;            } else {                $pathUploaded = "";            }            // Set Table Dynamicly            if($uploadFor=="upload_fee_structure"){                $tblName="bo_information_wizard_service_fee";                            }else{              $tblName="bo_information_wizard_service_parameters";              }            $connection=Yii::app()->db;	    $sql = "UPDATE $tblName SET $uploadFor='$pathUploaded' WHERE service_id=$serivceID AND servicetype_additionalsubservice=$subServiceID"; 		$command=$connection->createCommand($sql);		$command->execute();	                $docName= ucwords($docName);                  Yii::app()->user->setFlash('Success', ":: <b>$docName</b> for service ID: <b>$serivceID.$subServiceID</b> has been uploaded");                $this->redirect($_SERVER['HTTP_REFERER']);                                        }    }     /**     * Discription: This function use to upload all type of documents for a particular service     * Author: Rahul Kumar     */         public function actionUploadInspectionDocs() {       extract($_GET);        if (!empty($_POST)) {                if ($_FILES['file']['type'] == 'application/pdf' && $_FILES['file']['name'] != '' &&                    $_FILES['file']['size'] <= (1024 * 1024 * 5)) {                $path = Yii::app()->basePath . "/../../themes/backend/$location/";                $nname = $docName . "-" . "$serivceID" . "-" . "$subServiceID" . ".pdf";                move_uploaded_file($_FILES['file']['tmp_name'], $path . $nname);                $pathUploaded = "/themes/backend/" . $location . "/" . $nname;            } else {                $pathUploaded = "";            }            // Set Table Dynamicly             $tblName="bo_information_wizard_inspection";                                        $connection=Yii::app()->db;	    $sql = "UPDATE $tblName SET $uploadFor='$pathUploaded' WHERE service_id=$serivceID AND servicetype_additionalsubservice=$subServiceID"; 		$command=$connection->createCommand($sql);		$command->execute();	                $docName= ucwords($docName);                  Yii::app()->user->setFlash('Success', ":: <b>$docName</b> for service ID: <b>$serivceID.$subServiceID</b> has been uploaded");                $this->redirect($_SERVER['HTTP_REFERER']);                     }    }    }  